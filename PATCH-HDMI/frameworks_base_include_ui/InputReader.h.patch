--- InputReader.h.original	2012-02-23 18:57:41.000000000 +0100
+++ InputReader.h.psquare	2012-02-28 16:47:07.000000000 +0100
@@ -26,10 +26,24 @@
 #include <utils/RefBase.h>
 #include <utils/String8.h>
 #include <utils/BitSet.h>
+#include <cutils/properties.h>
 
 #include <stddef.h>
 #include <unistd.h>
 
+
+#define    MIN_DURATION_DOUBLE_TAP_DN2UP      25
+#define    MAX_DURATION_DOUBLE_TAP_DN2UP      150
+#define    MIN_DURATION_DOUBLE_TAP_UP2DN      70
+#define    MAX_DURATION_DOUBLE_TAP_UP2DN      200
+
+#define    MT_MIN_DURATION_DOUBLE_TAP_DN2UP   50
+#define    MT_MAX_DURATION_DOUBLE_TAP_DN2UP   150
+#define    MT_MIN_DURATION_DOUBLE_TAP_UP2DN   25
+#define    MT_MAX_DURATION_DOUBLE_TAP_UP2DN   150
+
+#define PROCESS_RESULT_PADMOUSE_KEY        0x0001
+
 namespace android {
 
 class InputDevice;
@@ -155,6 +169,10 @@
      */
     virtual status_t getInputDeviceInfo(int32_t deviceId, InputDeviceInfo* outDeviceInfo) = 0;
 
+    /* Set TV out status to InputReader, this status can be used in pad mose
+    */
+    virtual void setTvOutStatus(bool on) = 0;
+
     /* Gets the list of all registered device ids. */
     virtual void getInputDeviceIds(Vector<int32_t>& outDeviceIds) = 0;
 
@@ -190,6 +208,11 @@
     virtual InputReaderPolicyInterface* getPolicy() = 0;
     virtual InputDispatcherInterface* getDispatcher() = 0;
     virtual EventHubInterface* getEventHub() = 0;
+
+//	virtual bool isPadmouseOn() = 0;
+//	virtual bool isPadmouseDoubleClickEnable() = 0;
+//	virtual int32_t getPadmouseMagicKey() = 0;
+//	virtual bool isPadmouseDebug() = 0;
 };
 
 
@@ -216,6 +239,9 @@
     virtual void getInputConfiguration(InputConfiguration* outConfiguration);
 
     virtual status_t getInputDeviceInfo(int32_t deviceId, InputDeviceInfo* outDeviceInfo);
+
+    virtual void setTvOutStatus(bool on);
+
     virtual void getInputDeviceIds(Vector<int32_t>& outDeviceIds);
 
     virtual int32_t getScanCodeState(int32_t deviceId, uint32_t sourceMask,
@@ -266,7 +292,32 @@
 
     // state management for all devices
     Mutex mStateLock;
+/*
+	bool  mPadmouseOn;
+	bool  mPadmouseDebug;
+	bool  mPadmouseEnable;
+	bool  mDoubleClickEnable;
+	bool  mPadmouseMagicKeyEnable;
+	int32_t mPadmouseMagicKey;
+    virtual bool isPadmouseOn() {
+        return mPadmouseOn;
+    }
 
+    virtual bool isPadmouseDoubleClickEnable() {
+        return mPadmouseMagicKeyEnable;
+    }
+
+    virtual int32_t getPadmouseMagicKey() {
+        if (mPadmouseMagicKeyEnable)
+            return mPadmouseMagicKey;
+        else
+            return -1;
+    }
+
+	virtual bool isPadmouseDebug(){
+		return mPadmouseDebug;
+	}
+*/
     int32_t mGlobalMetaState;
     virtual void updateGlobalMetaState();
     virtual int32_t getGlobalMetaState();
@@ -311,6 +362,8 @@
     inline int32_t getId() { return mId; }
     inline const String8& getName() { return mName; }
     inline uint32_t getSources() { return mSources; }
+//    inline uint32_t getClasses() { return mClasses; }
+//    inline void setClasses(uint32_t classes) {  mClasses = classes; }
 
     inline bool isIgnored() { return mMappers.isEmpty(); }
 
@@ -319,6 +372,8 @@
     void configure();
     void reset();
     void process(const RawEvent* rawEvent);
+//or
+//    uint32_t process(const RawEvent* rawEvent);
 
     void getDeviceInfo(InputDeviceInfo* outDeviceInfo);
     int32_t getKeyCodeState(uint32_t sourceMask, int32_t keyCode);
@@ -341,6 +396,7 @@
 
     String8 mName;
     uint32_t mSources;
+//    uint32_t mClasses;
 
     typedef int32_t (InputMapper::*GetStateFunc)(uint32_t sourceMask, int32_t code);
     int32_t getState(uint32_t sourceMask, int32_t code, GetStateFunc getStateFunc);
@@ -372,6 +428,8 @@
     virtual void configure();
     virtual void reset();
     virtual void process(const RawEvent* rawEvent) = 0;
+//or
+//    virtual uint32_t process(const RawEvent* rawEvent) = 0;
 
     virtual int32_t getKeyCodeState(uint32_t sourceMask, int32_t keyCode);
     virtual int32_t getScanCodeState(uint32_t sourceMask, int32_t scanCode);
@@ -394,6 +452,7 @@
 
     virtual uint32_t getSources();
     virtual void process(const RawEvent* rawEvent);
+//    virtual uint32_t process(const RawEvent* rawEvent);
 
     virtual int32_t getSwitchState(uint32_t sourceMask, int32_t switchCode);
 
@@ -432,6 +491,7 @@
     int32_t mAssociatedDisplayId;
     uint32_t mSources;
     int32_t mKeyboardType;
+//    bool mRotateKeycode;
 
     uint32_t mBusType;
     bool mBluetooth;
@@ -447,6 +507,8 @@
 
     bool isKeyboardOrGamepadKey(int32_t scanCode);
 
+//    bool isPadmouseLeftKey(int32_t scanCode);
+
     void processKey(nsecs_t when, bool down, int32_t keyCode, int32_t scanCode,
             uint32_t policyFlags);
 
@@ -464,6 +526,7 @@
     virtual void dump(String8& dump);
     virtual void reset();
     virtual void process(const RawEvent* rawEvent);
+//    virtual uint32_t process(const RawEvent* rawEvent);
 
     virtual int32_t getScanCodeState(uint32_t sourceMask, int32_t scanCode);
 
@@ -518,6 +581,7 @@
     virtual void dump(String8& dump);
     virtual void reset();
     virtual void process(const RawEvent* rawEvent);
+//    virtual uint32_t process(const RawEvent* rawEvent);
 
     virtual int32_t getScanCodeState(uint32_t sourceMask, int32_t scanCode);
 
@@ -555,6 +619,7 @@
         int32_t relY;
         int32_t absX;
         int32_t absY;
+//        int32_t wheelVal;
 
         inline void clear() {
             fields = 0;
@@ -754,25 +819,42 @@
     // Current and previous touch sample data.
     TouchData mCurrentTouch;
     TouchData mLastTouch;
+//    TouchData mPadMouseTouch;
+
+//    bool  mDoubleClick;
+//    bool  mMagicKeyDown;
+//    bool  mPadmouseDown;
 
     // The time the primary pointer last went down.
     nsecs_t mDownTime;
+/*    // The time the primary pointer last last went down.
+    nsecs_t mLastDownTime;
 
+    nsecs_t mUpTime;
+
+    int32_t mDoubleTapMinDurationDn2Up;
+    int32_t mDoubleTapMaxDurationDn2Up;
+    int32_t mDoubleTapMinDurationUp2Dn;
+    int32_t mDoubleTapMaxDurationUp2Dn;
+*/
     struct LockedState {
         Vector<VirtualKey> virtualKeys;
 
         // The surface orientation and width and height set by configureSurfaceLocked().
         int32_t surfaceOrientation;
         int32_t surfaceWidth, surfaceHeight;
+//        int32_t hwrotation;
 
         // Translation and scaling factors, orientation-independent.
         int32_t xOrigin;
         float xScale;
         float xPrecision;
+//        int32_t xRange;
 
         int32_t yOrigin;
         float yScale;
         float yPrecision;
+//        int32_t yRange;
 
         float geometricScale;
 
@@ -833,6 +915,8 @@
     virtual void parseCalibration();
     virtual void resolveCalibration();
     virtual void dumpCalibration(String8& dump);
+//    virtual bool isPadmouseLeftKey(int32_t scanCode);
+//    virtual void generateVirtualTouch(nsecs_t when, bool down);
 
     enum TouchResult {
         // Dispatch the touch normally.
@@ -888,6 +972,7 @@
     void initializeLocked();
 
     TouchResult consumeOffScreenTouches(nsecs_t when, uint32_t policyFlags);
+//    void computeRelativePosition();
     void dispatchTouches(nsecs_t when, uint32_t policyFlags);
     void dispatchTouch(nsecs_t when, uint32_t policyFlags, TouchData* touch,
             BitSet32 idBits, uint32_t changedId, uint32_t pointerCount,
@@ -911,6 +996,7 @@
 
     virtual void reset();
     virtual void process(const RawEvent* rawEvent);
+//    virtual uint32_t process(const RawEvent* rawEvent);
 
 protected:
     virtual void configureRawAxes();
@@ -957,6 +1043,7 @@
 
     virtual void reset();
     virtual void process(const RawEvent* rawEvent);
+//    virtual uint32_t process(const RawEvent* rawEvent);
 
 protected:
     virtual void configureRawAxes();
