--- VideoView.java.original	2012-02-24 02:23:37.000000000 +0100
+++ VideoView.java.psquare	2012-03-05 05:41:09.439021063 +0100
@@ -38,6 +38,10 @@
 import android.content.BroadcastReceiver;
 import android.content.IntentFilter;
 import android.os.SystemProperties;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+
 
 import java.io.IOException;
 import java.util.Map;
@@ -109,6 +113,7 @@
     private boolean     mCanPause;
     private boolean     mCanSeekBack;
     private boolean     mCanSeekForward;
+    private boolean     mUseVideoLayout;
     private int         mStateWhenSuspended;  //state before calling suspend()
 
     private static final String ACTION_HDMI_PLUG = "android.intent.action.HDMI_PLUG";
@@ -325,10 +330,14 @@
             public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {
                 mVideoWidth = mp.getVideoWidth();
                 mVideoHeight = mp.getVideoHeight();
+				//for amlogic player, always use overlay to diaplay, so we don't need to set the exactlly size.
+				//and in HDMI mode, we show video in full screen mode.
+				if(SystemProperties.getBoolean("media.amsuperplayer.enable", false) == false) {
                 if (mVideoWidth != 0 && mVideoHeight != 0) {
                     getHolder().setFixedSize(mVideoWidth, mVideoHeight);
                 }
             }
+            }
     };
 
     MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener() {
@@ -348,6 +357,8 @@
             Metadata data = mp.getMetadata(MediaPlayer.METADATA_ALL,
                                       MediaPlayer.BYPASS_METADATA_FILTER);
 
+			mUseVideoLayout = false;
+
             if (data != null) {
                 mCanPause = !data.has(Metadata.PAUSE_AVAILABLE)
                         || data.getBoolean(Metadata.PAUSE_AVAILABLE);
@@ -355,6 +366,14 @@
                         || data.getBoolean(Metadata.SEEK_BACKWARD_AVAILABLE);
                 mCanSeekForward = !data.has(Metadata.SEEK_FORWARD_AVAILABLE)
                         || data.getBoolean(Metadata.SEEK_FORWARD_AVAILABLE);
+
+				int PLAYER_TYPE_ID = 8200;
+				if( (data.has(PLAYER_TYPE_ID)) && (data.getInt(PLAYER_TYPE_ID) == 8))
+				{
+					Log.d(TAG,"play type is 8");
+					mUseVideoLayout = true;
+				}
+					
             } else {
                 mCanPause = mCanSeekBack = mCanSeekForward = true;
             }
@@ -372,8 +391,10 @@
             if (seekToPosition != 0) {
                 seekTo(seekToPosition);
             }
-            if (mVideoWidth != 0 && mVideoHeight != 0) {
-                //Log.i("@@@@", "video size: " + mVideoWidth +"/"+ mVideoHeight);
+			
+            if ( !notSetSurface() && (mVideoWidth != 0 && mVideoHeight != 0)) {
+                Log.d("@@@@", "video size: " + mVideoWidth +"/"+ mVideoHeight);
+				
                 getHolder().setFixedSize(mVideoWidth, mVideoHeight);
                 if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) {
                     // We didn't actually change the size (it was already at the size
@@ -397,6 +418,9 @@
                 // The video size might be reported to us later.
                 if (mTargetState == STATE_PLAYING) {
                     start();
+					if (mMediaController != null) {
+                        mMediaController.show();
+                    }
                 }
             }
         }
@@ -748,7 +772,39 @@
     public boolean canSeekForward() {
         return mCanSeekForward;
     }
+	/** get current hdmi display mode*/
+	private static final String MODE_PATH = "/sys/class/display/mode";
+    private boolean chkIfHdmiMode() {
+    	String modeStr = null;
+    	
+        File file = new File(MODE_PATH);
+        if (!file.exists()) {
+			return false;
+        }    	
+    	try {
+    		BufferedReader reader = new BufferedReader(new FileReader(MODE_PATH), 32);
+    		try {
+    			modeStr = reader.readLine();  
+    		} finally {
+    			reader.close();
+    		}
+			if(modeStr == null)
+				return false;
+    		
+    	} catch (IOException e) { 
+    		Log.e("MediaController", "IO Exception when read: " + MODE_PATH, e);
+    		return false;
+    	}
+		if (modeStr.equals("panel"))
+			return false;
+		else
+			return true;
+    }    
 
+	private boolean notSetSurface()
+	{
+		return (chkIfHdmiMode())&&(mUseVideoLayout);
+	}
     /**
      * Receiver for HDMI-Hotplug intent broadcasts
      * @hide
