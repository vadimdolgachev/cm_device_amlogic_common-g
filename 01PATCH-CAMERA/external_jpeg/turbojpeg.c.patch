--- turbojpeg.c.original
+++ turbojpeg.c
@@ -405,6 +405,72 @@
 	return tjBufSizeYUV(width, height, subsamp);
 }
 
+DLLEXPORT int DLLCALL tjCompressRGB2YUV420WithMark(tjhandle handle, unsigned char *srcBuf,
+	int width, int height, unsigned char **jpegBuf,unsigned long *jpegSize, int jpegQual,
+	 unsigned char*markstr,int marksize )
+{
+	int pitch=0;
+	int i, retval=0, alloc=1;  JSAMPROW *row_pointer=NULL;
+	int pixelFormat=TJPF_RGB;
+    int jpegSubsamp=TJSAMP_420;
+    int flags=TJFLAG_NOREALLOC;    
+    
+	getinstance(handle)
+	if((this->init&COMPRESS)==0)
+		_throw("tjCompress2(): Instance has not been initialized for compression");
+
+	if(srcBuf==NULL || width<=0 || pitch<0 || height<=0 || pixelFormat<0
+		|| pixelFormat>=TJ_NUMPF || jpegBuf==NULL || jpegSize==NULL
+		|| jpegSubsamp<0 || jpegSubsamp>=NUMSUBOPT || jpegQual<0 || jpegQual>100)
+		_throw("tjCompress2(): Invalid argument");
+
+	if(setjmp(this->jerr.setjmp_buffer))
+	{
+		/* If we get here, the JPEG code has signaled an error. */
+		retval=-1;
+		goto bailout;
+	}
+
+	if(pitch==0) pitch=width*tjPixelSize[pixelFormat];
+
+	cinfo->image_width=width;
+	cinfo->image_height=height;
+
+	if(flags&TJFLAG_FORCEMMX) putenv("JSIMD_FORCEMMX=1");
+	else if(flags&TJFLAG_FORCESSE) putenv("JSIMD_FORCESSE=1");
+	else if(flags&TJFLAG_FORCESSE2) putenv("JSIMD_FORCESSE2=1");
+
+	if(flags&TJFLAG_NOREALLOC)
+	{
+		alloc=0;  *jpegSize=tjBufSize(width, height, jpegSubsamp);
+	}
+	jpeg_mem_dest_tj(cinfo, jpegBuf, jpegSize, alloc);
+	setCompDefaults(cinfo, pixelFormat, jpegSubsamp, jpegQual);
+
+	jpeg_start_compress(cinfo, TRUE);
+	
+	if(markstr&&marksize)
+		jpeg_write_marker(cinfo,0xe1,markstr,marksize);
+	
+	if((row_pointer=(JSAMPROW *)malloc(sizeof(JSAMPROW)*height))==NULL)
+		_throw("tjCompress2(): Memory allocation failure");
+	for(i=0; i<height; i++)
+	{
+		if(flags&TJFLAG_BOTTOMUP) row_pointer[i]=&srcBuf[(height-i-1)*pitch];
+		else row_pointer[i]=&srcBuf[i*pitch];
+	}
+	while(cinfo->next_scanline<cinfo->image_height)
+	{
+		jpeg_write_scanlines(cinfo, &row_pointer[cinfo->next_scanline],
+			cinfo->image_height-cinfo->next_scanline);
+	}
+	jpeg_finish_compress(cinfo);
+
+	bailout:
+	if(cinfo->global_state>CSTATE_START) jpeg_abort_compress(cinfo);
+	if(row_pointer) free(row_pointer);
+	return retval;
+}
 
 DLLEXPORT int DLLCALL tjCompress2(tjhandle handle, unsigned char *srcBuf,
 	int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf,
