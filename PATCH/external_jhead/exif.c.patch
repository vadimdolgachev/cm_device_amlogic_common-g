--- exif.c.original	2012-02-04 07:55:38.000000000 +0100
+++ exif.c.psquare	2012-02-04 10:12:38.802846235 +0100
@@ -1022,6 +1022,8 @@
 
     ImageInfo.ThumbnailAtEnd = ImageInfo.ThumbnailOffset >= ImageInfo.LargestExifOffset ? TRUE : FALSE;
 #ifdef SUPERDEBUG
+    LOGE("ImageInfo.ThumbnailOffset=0x%x\n", ImageInfo.ThumbnailOffset);
+    LOGE("ImageInfo.LargestExifOffset = 0x%x\n", ImageInfo.LargestExifOffset);
     printf("Thumbnail %s end", (ImageInfo.ThumbnailAtEnd ? "at" : "NOT at"));
 #endif
     if (DumpExifMap){
@@ -1085,6 +1087,8 @@
                                 char* Buffer,
                                 int* DirIndex,
                                 int* DataWriteIndex) {
+	printf("# tag: %d components: %ld", tag, components);
+
     Put16u(Buffer+ (*DirIndex), tag);                    // Tag
     Put16u(Buffer+(*DirIndex) + 2, format);              // Format
     if (format == FMT_STRING && components == -1) {
@@ -1165,6 +1169,122 @@
 #endif
 
 //--------------------------------------------------------------------------
+// Get the Exif buffer
+//--------------------------------------------------------------------------
+unsigned char* _create_EXIF(ExifElement_t* elements, int exifTagCount, int gpsTagCount, int* exifLen,int thumbnaillen,char* thumbnaildata);
+unsigned char* getExifBuf(char** attrlist, int attrCount, int* exifLen,int thumbnailLen,char* thumbnaildata)
+{
+#ifdef SUPERDEBUG
+    LOGE("******************************** getExifBuf\n");
+#endif
+    // format of attributes string passed from java:
+    // "attrCnt attr1=valueLen value1attr2=value2Len value2..."
+    // example input: "4 ImageLength=4 1024Model=6 FooImageWidth=4 1280Make=3 FOO"
+    ExifElement_t* exifElementTable = NULL;
+	unsigned char* exifBuf = NULL;
+	char* attrPtr = NULL;
+
+    if (attrlist == NULL) {
+        goto exit;
+    }
+#ifdef SUPERDEBUG
+    LOGE("attributes %s\n", *attrlist);
+#endif
+
+    // Load all the hash exif elements into a more c-like structure
+    exifElementTable = malloc(sizeof(ExifElement_t) * attrCount);
+    if (exifElementTable == NULL) {
+        goto exit;
+    }
+#ifdef OUTOFMEMORYTEST1
+    goto exit;
+#endif
+
+    int i;
+    char tag[100];
+    int gpsTagCount = 0;
+    int exifTagCount = 0;
+
+    for (i = 0; i < attrCount; i++) {
+        // get an element from the attribute string and add it to the c structure
+        // first, extract the attribute name
+        char* tagEnd = strchr(attrlist[i], '=');
+        if (tagEnd == 0) {
+#ifdef SUPERDEBUG
+            LOGE("saveAttributes: couldn't find end of tag");
+#endif
+            goto exit;
+        }
+		attrPtr = attrlist[i];
+        if (tagEnd - attrPtr > 99) {
+#ifdef SUPERDEBUG
+            LOGE("saveAttributes: attribute tag way too long");
+#endif
+            goto exit;
+        }
+        memcpy(tag, attrPtr, tagEnd - attrPtr);
+        tag[tagEnd - attrPtr] = 0;
+
+        if (IsGpsTag(tag)) {
+            exifElementTable[i].GpsTag = TRUE;
+            exifElementTable[i].Tag = GpsTagNameToValue(tag);
+            ++gpsTagCount;
+        } else {
+            exifElementTable[i].GpsTag = FALSE;
+            exifElementTable[i].Tag = TagNameToValue(tag);
+            ++exifTagCount;
+        }
+        attrPtr = tagEnd + 1;
+
+        // next get the length of the attribute value
+        int valueLen = atoi(attrPtr);
+        attrPtr = strchr(attrPtr, ' ') + 1;
+        if (attrPtr == 0) {
+#ifdef SUPERDEBUG
+            LOGE("saveAttributes: couldn't find end of value len");
+#endif
+            goto exit;
+        }
+        exifElementTable[i].Value = malloc(valueLen + 1);
+        if (exifElementTable[i].Value == NULL) {
+            goto exit;
+        }
+        memcpy(exifElementTable[i].Value, attrPtr, valueLen);
+        exifElementTable[i].Value[valueLen] = 0;
+        exifElementTable[i].DataLength = valueLen;
+
+        attrPtr += valueLen;
+
+#ifdef SUPERDEBUG
+        LOGE("tag %s id %d value %s data length=%d isGps=%d", tag, exifElementTable[i].Tag,
+            exifElementTable[i].Value, exifElementTable[i].DataLength, exifElementTable[i].GpsTag);
+#endif
+    }
+
+    exifBuf = _create_EXIF(exifElementTable, exifTagCount, gpsTagCount, exifLen,thumbnailLen,thumbnaildata);
+
+exit:
+#ifdef SUPERDEBUG
+    LOGE("cleaning up now in getExifBuf");
+#endif
+    // try to clean up resources
+    if (exifElementTable) {
+        // free the table
+        for (i = 0; i < attrCount; i++) {
+            free(exifElementTable[i].Value);
+        }
+        free(exifElementTable);
+    }
+#ifdef SUPERDEBUG
+    LOGE("returning from getExifBuf");
+#endif
+	if (exifBuf != NULL)
+		return exifBuf;
+	else
+		return NULL;
+}
+
+//--------------------------------------------------------------------------
 // Create minimal exif header - just date and thumbnail pointers,
 // so that date and thumbnail may be filled later.
 //--------------------------------------------------------------------------
@@ -1385,6 +1505,204 @@
 }
 
 //--------------------------------------------------------------------------
+// Create minimal exif header - return buffer, but not create section.
+//--------------------------------------------------------------------------
+unsigned char* _create_EXIF(ExifElement_t* elements, int exifTagCount, int gpsTagCount, int* exifLen,int thumbnaillen,char* thumbnaildata)
+{
+    // TODO: We need to dynamically allocate this buffer and resize it when
+    // necessary while writing so we don't do a buffer overflow.
+    char Buffer[1024];
+
+    unsigned short NumEntries;
+    int DataWriteIndex;
+    int DirIndex;
+    int FirstIdfIndex = 0;
+
+#ifdef SUPERDEBUG
+    LOGE("create_EXIF %d exif elements, %d gps elements", exifTagCount, gpsTagCount);
+#endif
+    
+    MotorolaOrder = 0;
+
+    memcpy(Buffer+2, "Exif\0\0II",8);
+    Put16u(Buffer+10, 0x2a);
+
+    DataWriteIndex = 16;
+    Put32u(Buffer+12, DataWriteIndex-8); // first IFD offset.  Means start 16 bytes in.
+
+    {
+        DirIndex = DataWriteIndex;
+        NumEntries = exifTagCount;
+        if (gpsTagCount) {
+            ++NumEntries;       // add the GPS info tag
+        }
+        DataWriteIndex += 2 + NumEntries*12 + 4;
+
+        Put16u(Buffer+DirIndex, NumEntries); // Number of entries
+        DirIndex += 2;
+  
+        if (exifTagCount > 0) {
+            int i;
+            for (i = 0; i < exifTagCount + gpsTagCount; i++) {
+                if (elements[i].GpsTag) {
+                    continue;
+                }
+                const TagTable_t* entry = TagToTagTableEntry(elements[i].Tag);
+                if (entry == NULL) {
+                    continue;
+                }
+#ifdef SUPERDEBUG
+                LOGE("create_EXIF saving tag %x value \"%s\"",elements[i].Tag, elements[i].Value);
+#endif
+                writeExifTagAndData(elements[i].Tag,
+                                    entry->Format,
+                                    entry->DataLength,
+                                    (long)elements[i].Value,
+                                    TRUE,
+                                    Buffer,
+                                    &DirIndex,
+                                    &DataWriteIndex);
+            }
+        
+            if (gpsTagCount) {
+                // Link to gps dir entry
+                writeExifTagAndData(TAG_GPSINFO,
+                                    FMT_ULONG,
+                                    1,
+                                    DataWriteIndex-8,
+                                    FALSE,
+                                    Buffer,
+                                    &DirIndex,
+                                    &DataWriteIndex);
+            }
+        }
+
+        // End of directory - contains optional link to continued directory.
+        FirstIdfIndex = DirIndex;
+        printf("Ending Exif section DirIndex = %d DataWriteIndex %d", DirIndex, DataWriteIndex);
+    }
+
+
+    // GPS Section
+    if (gpsTagCount) {
+        DirIndex = DataWriteIndex;
+        printf("Starting GPS section DirIndex = %d", DirIndex);
+        NumEntries = gpsTagCount;
+        DataWriteIndex += 2 + NumEntries*12 + 4;
+
+        Put16u(Buffer+DirIndex, NumEntries); // Number of entries
+        DirIndex += 2;
+        {
+            int i;
+            for (i = 0; i < exifTagCount + gpsTagCount; i++) {
+                if (!elements[i].GpsTag) {
+                    continue;
+                }
+                const TagTable_t* entry = GpsTagToTagTableEntry(elements[i].Tag);
+                if (entry == NULL) {
+                    continue;
+                }
+#ifdef SUPERDEBUG
+                LOGE("create_EXIF saving GPS tag %x value \"%s\"",elements[i].Tag, elements[i].Value);
+#endif
+
+                if(elements[i].Tag == 0x1b)//this is TAG GPSProcessingMethod
+                {
+	                writeExifTagAndData(elements[i].Tag,
+	                FMT_UNDEFINED,
+	                elements[i].DataLength,
+	                (long)elements[i].Value,
+	                TRUE,
+	                Buffer,
+	                &DirIndex,
+	                &DataWriteIndex);
+                }
+                else
+                {
+                	writeExifTagAndData(elements[i].Tag,
+	                                    entry->Format,
+	                                    entry->DataLength,
+	                                    (long)elements[i].Value,
+	                                    TRUE,
+	                                    Buffer,
+	                                    &DirIndex,
+	                                    &DataWriteIndex);
+                }
+            }
+        }
+
+        // End of directory - contains optional link to continued directory.
+        Put32u(Buffer+DirIndex, 0);
+        printf("Ending GPS section DirIndex = %d DataWriteIndex %d", DirIndex, DataWriteIndex);
+    }
+
+    // 1st IFD
+    {
+        //Continuation which links to this directory;
+        Put32u(Buffer+FirstIdfIndex, DataWriteIndex-8);
+
+        printf("Starting Thumbnail section DirIndex = %d", DirIndex);
+        DirIndex = DataWriteIndex;
+        NumEntries = 3;
+        DataWriteIndex += 2 + NumEntries*12 + 4;
+
+        Put16u(Buffer+DirIndex, NumEntries); // Number of entries
+        DirIndex += 2;
+
+        //add Compression info
+        writeExifTagAndData(TAG_COMPRESSION,
+                            FMT_USHORT,
+                            1,
+                            6,
+                            FALSE,
+                            Buffer,
+                            &DirIndex,
+                            &DataWriteIndex);
+
+        //add thumbnail offset
+        writeExifTagAndData(TAG_THUMBNAIL_OFFSET,
+                            FMT_ULONG,
+                            1,
+                            DataWriteIndex-8,
+                            FALSE,
+                            Buffer,
+                            &DirIndex,
+                            &DataWriteIndex);
+
+        //add thumbnail length
+        writeExifTagAndData(TAG_THUMBNAIL_LENGTH,
+                            FMT_ULONG,
+                            1,
+                            thumbnaillen,
+                            FALSE,
+                            Buffer,
+                            &DirIndex,
+                            &DataWriteIndex);
+
+        // End of directory - contains optional link to continued directory.
+        Put32u(Buffer+DirIndex, 0);
+        printf("Ending Thumbnail section DirIndex = %d DataWriteIndex %d", DirIndex, DataWriteIndex);
+    }
+
+    Buffer[0] = (unsigned char)(DataWriteIndex >> 8);
+    Buffer[1] = (unsigned char)DataWriteIndex;
+	*exifLen = DataWriteIndex+thumbnaillen;
+	
+    unsigned char * NewBuf = malloc(*exifLen);
+    if (NewBuf == NULL){
+        ErrFatal("Could not allocate memory");
+    }
+    memcpy(NewBuf, Buffer, DataWriteIndex);
+	if(thumbnaillen > 0)
+	{
+		memcpy(NewBuf+DataWriteIndex,thumbnaildata,thumbnaillen);
+	}
+    
+	return NewBuf;
+}
+
+
+//--------------------------------------------------------------------------
 // Cler the rotation tag in the exif header to 1.
 //--------------------------------------------------------------------------
 const char * ClearOrientation(void)
